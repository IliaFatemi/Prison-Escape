Index: src/main/java/com/group10/app/entity/nonStaticEntities/Guard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group10.app.entity.nonStaticEntities;\r\n\r\n\r\nimport com.group10.app.main.GamePanel;\r\n\r\n/**\r\n * The guard class in charge of the Guard implementation\r\n *\r\n * <p>\r\n *     This class implements the guard functionality for the game\r\n *     manages the guards movements, interactions, drawing the sprites and\r\n *     changing them with the guards movements.\r\n * </p>\r\n *\r\n */\r\npublic class Guard extends MovingActor {\r\n    GamePanel gp;\r\n    boolean moving = false;\r\n    int pixelCounter = 0;\r\n\r\n    /**\r\n     * The constructor for the Guard class...\r\n     *\r\n     * <p>\r\n     *     Default setting include: direction = down\r\n     *                              speed = 1\r\n     *                              SolidArea(8, 16, 32, 32)\r\n     *                              Get guard's images\r\n     * </p>\r\n     *\r\n     * @param gp main game panel\r\n     */\r\n    public Guard(GamePanel gp){\r\n        super(gp);\r\n        this.gp = gp;\r\n\r\n        setDirection(\"down\");\r\n        setSpeed(1);\r\n\r\n        getGuardImage();\r\n\r\n        solidAreaDefaultX = getSolidArea().x;\r\n        solidAreaDefaultY = getSolidArea().y;\r\n    }\r\n\r\n    /**\r\n     * getGuardImage method is in charge of registering the image directories for the guard enemy\r\n     */\r\n    public void getGuardImage(){\r\n        up1 = setup(\"/prisonGuard/WalkUp1\");\r\n        up2 = setup(\"/prisonGuard/WalkUp2\");\r\n        up3 = setup(\"/prisonGuard/WalkUp3\");\r\n        down1 = setup(\"/prisonGuard/WalkDown1\");\r\n        down2 = setup(\"/prisonGuard/WalkDown2\");\r\n        down3 = setup(\"/prisonGuard/WalkDown3\");\r\n        left1 = setup(\"/prisonGuard/WalkLeft1\");\r\n        left2 = setup(\"/prisonGuard/WalkLeft2\");\r\n        left3 = setup(\"/prisonGuard/WalkLeft3\");\r\n        right1 = setup(\"/prisonGuard/WalkRight1\");\r\n        right2 = setup(\"/prisonGuard/WalkRight2\");\r\n        right3 = setup(\"/prisonGuard/WalkRight3\");\r\n    }\r\n\r\n    /**\r\n     * set the value for guard\r\n     *\r\n     * @param x value to set guards x position\r\n     * @param y value to set guards y position\r\n     */\r\n    public void setGuardValues(int x, int y){\r\n        setX(x);\r\n        setY(y);\r\n        setSpeed(1);\r\n        moving = false;\r\n        setDirection(\"default\");\r\n    }\r\n\r\n    /**\r\n     * update method is in charge of updating the position of the guard\r\n     * <p>\r\n     *     The update method in the Guard class is responsible for the movement\r\n     *     of the guard when the inmate comes within range of the guard. Once the inmate\r\n     *     is in range the guard will follow the player\r\n     * </p>\r\n     */\r\n    public void update() {\r\n\r\n        if (!moving) {\r\n\r\n            if (gp.inmate.getX() < getX()) {\r\n                setDirection(\"left\");\r\n            }\r\n            else if (gp.inmate.getX() > getX()) {\r\n                setDirection(\"right\");\r\n            }\r\n\r\n            if (Math.abs(gp.inmate.getX() - getX()) < gp.cellSize){\r\n                if (gp.inmate.getY() < getY()) {\r\n                    setDirection(\"up\");\r\n                }\r\n                else if (gp.inmate.getY() > getY()) {\r\n                    setDirection(\"down\");\r\n                }\r\n            }\r\n\r\n            moving = true;\r\n        }\r\n\r\n        collision = false;\r\n        gp.collisionCheck.wallCheck(this);\r\n\r\n        collisionUpdate();\r\n        spriteUpdate();\r\n\r\n        pixelCounter += getSpeed();\r\n\r\n        if (pixelCounter == 48) {\r\n            moving = false;\r\n            pixelCounter = 0;\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/group10/app/entity/nonStaticEntities/Guard.java b/src/main/java/com/group10/app/entity/nonStaticEntities/Guard.java
--- a/src/main/java/com/group10/app/entity/nonStaticEntities/Guard.java	
+++ b/src/main/java/com/group10/app/entity/nonStaticEntities/Guard.java	
@@ -17,20 +17,21 @@
     GamePanel gp;
     boolean moving = false;
     int pixelCounter = 0;
+    boolean alerted = false;
 
     /**
      * The constructor for the Guard class...
      *
      * <p>
-     *     Default setting include: direction = down
-     *                              speed = 1
-     *                              SolidArea(8, 16, 32, 32)
-     *                              Get guard's images
+     * Default setting include: direction = down
+     * speed = 1
+     * SolidArea(8, 16, 32, 32)
+     * Get guard's images
      * </p>
      *
      * @param gp main game panel
      */
-    public Guard(GamePanel gp){
+    public Guard(GamePanel gp) {
         super(gp);
         this.gp = gp;
 
@@ -46,7 +47,7 @@
     /**
      * getGuardImage method is in charge of registering the image directories for the guard enemy
      */
-    public void getGuardImage(){
+    public void getGuardImage() {
         up1 = setup("/prisonGuard/WalkUp1");
         up2 = setup("/prisonGuard/WalkUp2");
         up3 = setup("/prisonGuard/WalkUp3");
@@ -67,7 +68,7 @@
      * @param x value to set guards x position
      * @param y value to set guards y position
      */
-    public void setGuardValues(int x, int y){
+    public void setGuardValues(int x, int y) {
         setX(x);
         setY(y);
         setSpeed(1);
@@ -75,49 +76,97 @@
         setDirection("default");
     }
 
+    /**
+     * Decides if the inmate is close enough for the guard to be in an alerted state
+     */
+    public void GuardAlerted() {
+        if (((gp.inmate.getX() - getX()) < 200) && ((gp.inmate.getY() - getY()) < 200)) {
+            alerted = true;
+        } else {
+            alerted = false;
+        }
+    }
+
     /**
      * update method is in charge of updating the position of the guard
      * <p>
-     *     The update method in the Guard class is responsible for the movement
-     *     of the guard when the inmate comes within range of the guard. Once the inmate
-     *     is in range the guard will follow the player
+     * The update method in the Guard class is responsible for the movement
+     * of the guard when the inmate comes within range of the guard. Once the inmate
+     * is in range the guard will follow the player
      * </p>
      */
     public void update() {
-
-        if (!moving) {
-
-            if (gp.inmate.getX() < getX()) {
-                setDirection("left");
-            }
-            else if (gp.inmate.getX() > getX()) {
-                setDirection("right");
-            }
+        GuardAlerted();
+        if (alerted) {
+            if (!moving) {
+                if (gp.inmate.getX() < getX()) {
+                    setDirection("left");
+                } else if (gp.inmate.getX() > getX()) {
+                    setDirection("right");
+                }
 
-            if (Math.abs(gp.inmate.getX() - getX()) < gp.cellSize){
-                if (gp.inmate.getY() < getY()) {
-                    setDirection("up");
-                }
-                else if (gp.inmate.getY() > getY()) {
-                    setDirection("down");
-                }
-            }
+                if (Math.abs(gp.inmate.getX() - getX()) < gp.cellSize) {
+                    if (gp.inmate.getY() < getY()) {
+                        setDirection("up");
+                    } else if (gp.inmate.getY() > getY()) {
+                        setDirection("down");
+                    }
+                }
 
-            moving = true;
-        }
+                moving = true;
+            }
 
-        collision = false;
-        gp.collisionCheck.wallCheck(this);
+            collision = false;
+            gp.collisionCheck.wallCheck(this);
 
-        collisionUpdate();
-        spriteUpdate();
+            collisionUpdate();
+            spriteUpdate();
+
+            pixelCounter += getSpeed();
+
+            if (pixelCounter == 48) {
+                moving = false;
+                pixelCounter = 0;
+            }
+        } else {
+            String currentDirection = getDirection();
+            collision = false;
+            gp.collisionCheck.wallCheck(this);
+
+            collisionUpdate();
+            if(collision){
+                if(getDirection() == "left"){
+                    setDirection("right");
+                }
+                else if(getDirection() == "right"){
+                    setDirection("left");
+                }
+                else if(getDirection() == "up"){
+                    setDirection("down");
+                }
+                else if(getDirection() == "down"){
+                    setDirection("up");
+                }
+                spriteUpdate();
+
+                pixelCounter += getSpeed();
+
+                if (pixelCounter == 48) {
+                    moving = false;
+                    pixelCounter = 0;
+                }
+            }
+            else{
+                setDirection(currentDirection);
+                spriteUpdate();
 
-        pixelCounter += getSpeed();
+                pixelCounter += getSpeed();
 
-        if (pixelCounter == 48) {
-            moving = false;
-            pixelCounter = 0;
+                if (pixelCounter == 48) {
+                    moving = false;
+                    pixelCounter = 0;
+                }
+            }
         }
     }
-
 }
Index: Prison_Escape.iml
===================================================================
diff --git a/Prison_Escape.iml b/Prison_Escape.iml
deleted file mode 100644
--- a/Prison_Escape.iml	
+++ /dev/null	
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_14">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/target" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.13.2" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter:5.8.2" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-api:5.8.2" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.opentest4j:opentest4j:1.2.0" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.junit.platform:junit-platform-commons:1.8.2" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.apiguardian:apiguardian-api:1.1.2" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-params:5.8.2" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-engine:5.8.2" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.junit.platform:junit-platform-engine:1.8.2" level="project" />
-  </component>
-</module>
\ No newline at end of file
