Index: src/main/java/com/group10/app/entity/Inmate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group10.app.entity;\n\nimport com.group10.app.main.GamePanel;\nimport com.group10.app.main.KeyManager;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\n\n\npublic class Inmate extends Entity{\n    GamePanel gp;\n    KeyManager keyH;\n    public int hasKey = 0;\n    public int score = 0;\n    public double time = 100;\n\n    public Inmate(GamePanel gp, KeyManager keyH){\n        this.gp = gp;\n        this.keyH = keyH;\n\n        solidArea = new Rectangle(8, 16, 32, 32);\n        solidArea.x = 0;\n        solidArea.y = 0;\n        solidX = solidArea.x;\n        solidY = solidArea.y;\n        solidArea.width = 32;\n        solidArea.height = 32;\n\n        solidX = 8;\n        solidY = 16;\n\n        setInmateValues();\n        getInmateImage();\n    }\n\n    public void setInmateValues(){\n        x = 100;\n        y = 100;\n        speed = 2;\n        direction = \"down\";\n    }\n\n    \n    public void getInmateImage(){\n        try{\n            up1 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkUp1.png\"));\n            up2 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkUp2.png\"));\n            up3 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkUp3.png\"));\n            down1 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkDown1.png\"));\n            down2 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkDown2.png\"));\n            down3 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkDown3.png\"));\n            left1 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkLeft1.png\"));\n            left2 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkLeft2.png\"));\n            left3 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkLeft3.png\"));\n            right1 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkRight1.png\"));\n            right2 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkRight2.png\"));\n            right3 = ImageIO.read(getClass().getResourceAsStream(\"/inmate/walkRight3.png\"));\n        }catch(IOException e){\n            e.printStackTrace();\n        }\n    }\n\n    public void update(){\n        if(keyH.pressedUp|| keyH.pressedDown || keyH.pressedLeft || keyH.pressedRight) {\n            if (keyH.pressedUp) {\n                direction = \"up\";\n            } else if (keyH.pressedDown) {\n                direction = \"down\";\n            } else if (keyH.pressedLeft) {\n                direction = \"left\";\n            } else if (keyH.pressedRight) {\n                direction = \"right\";\n            }\n\n            int objectIndex = gp.collisionCheck.checkObject(this, true);\n            pickUpObject(objectIndex);\n\n            collision = false;\n            gp.collisionCheck.wallCheck(this);\n\n            if(collision == false){\n                switch (direction) {\n                    case \"up\": y -= speed; break;\n                    case \"down\": y += speed; break;\n                    case \"left\": x -= speed; break;\n                    case \"right\": x += speed; break;\n                }\n            }\n\n            spriteCounter++;\n            if (spriteCounter > 11) {\n                if (spriteNum == 1) {\n                    spriteNum = 2;\n                } else if (spriteNum == 2) {\n                    spriteNum = 3;\n                } else if (spriteNum == 3) {\n                    spriteNum = 1;\n                }\n                spriteCounter = 0;\n            }\n        }\n    }\n\n    //Get the x position of the player\n    public double getX(){return x;}\n\n    //Get the Y position of the player\n    public double getY(){return y;}\n\n    //Get player speed\n    public double getSpeed(){return speed;}\n\n    //Get player direction\n    public String getDirection(){return direction;}\n\n    //Get number of keys collected\n    public int getNumKeys(){return hasKey;}\n\n    //Get the score collected \n    public int getScore(){return score;}\n\n    //getting the current timer\n    public int getTimer(){return (int)time;}\n\n    //Set the timer\n    public void setTimer(double newTime){time = newTime;}\n\n    //set the score\n    public void setScore(int newScore){score = newScore;}\n\n    //set player position\n    public void setPos(int posX, int posY){x = posX; y = posY;}\n\n    //set player speed\n    public void setSpeed(int newSpeed){speed = newSpeed;}\n    \n    //set players direction\n    public void setDirection(String newDir){direction = newDir;}\n\n    //set key amount\n    public void setNumKeys(int newNumKeys){hasKey = newNumKeys;}\n\n    //reset the keys\n    public void resetKeys(){hasKey = 0;}\n\n    //reset everything\n    public void resetInmate(){\n        x = 100;\n        y = 100;\n        time = 100;\n        score = 0;\n    }\n\n    //Setting the players position in the oposite direction\n    public void revertPosition(String pos){\n        if(pos == \"down\"){\n            y *= -1;\n            if(y >= 0){\n                y -= 1;\n            }\n            else{\n                y += 1;\n            }\n        }\n        else if(pos == \"up\"){\n            y *= -1;\n            if(y >= 0){\n                y -= 100;\n            }\n            else{\n                y += 100;\n            }\n        }\n        else if(pos == \"left\"){\n            x *= -1;\n            if(x >= 0){\n                x -= 100;\n            }\n            else{\n                x += 100;\n            }\n        } \n        else if(pos == \"right\"){\n            x *= -1;\n            if(x >= 0){\n                x -= 1;\n            }\n            else{\n                x += 1;\n            }\n        }\n    }\n\n    public void pickUpObject (int i) {\n\n        if (i != 999){\n\n            String objectName = gp.obj[i].name;\n\n            switch (objectName){\n                case \"Key\":\n                    gp.playSE(1);\n                    hasKey++;\n                    gp.obj[i] = null;\n                    break;\n                case \"Timer\":\n                    gp.playSE(2);\n                    time += 20;\n                    gp.obj[i] = null;\n                    break;\n                case \"Chicken\":\n                    gp.playSE(3);\n                    score += 100;\n                    gp.obj[i] = null;\n                    break;\n                case \"Trap\":\n                    gp.playSE(4);\n                    score -= 50;\n                    gp.obj[i] = null;\n                    break;\n            }\n        }\n    }\n\n    public void draw(Graphics2D g2){\n        BufferedImage image = null;\n        switch (direction){\n            case \"up\":\n                if(spriteNum == 1){\n                    image = up1;\n                }\n                if(spriteNum == 2){\n                    image = up2;\n                }\n                if(spriteNum == 3){\n                    image = up3;\n                }\n                break;\n            case \"down\":\n                if(spriteNum == 1){\n                    image = down1;\n                }\n                if(spriteNum == 2){\n                    image = down2;\n                }\n                if(spriteNum == 3){\n                    image = down3;\n                }\n                break;\n            case \"left\":\n                if(spriteNum == 1){\n                    image = left1;\n                }\n                if(spriteNum == 2){\n                    image = left2;\n                }\n                if(spriteNum == 3){\n                    image = left3;\n                }\n                break;\n            case \"right\":\n                if(spriteNum == 1){\n                    image = right1;\n                }\n                if(spriteNum == 2){\n                    image = right2;\n                }\n                if(spriteNum == 3){\n                    image = right3;\n                }\n                break;\n            default:\n            break;\n        }\n\n        g2.drawImage(image, x , y, gp.cellSize, gp.cellSize, null);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/group10/app/entity/Inmate.java b/src/main/java/com/group10/app/entity/Inmate.java
--- a/src/main/java/com/group10/app/entity/Inmate.java	
+++ b/src/main/java/com/group10/app/entity/Inmate.java	
@@ -17,6 +17,7 @@
     public double time = 100;
 
     public Inmate(GamePanel gp, KeyManager keyH){
+        super(gp);
         this.gp = gp;
         this.keyH = keyH;
 
Index: src/main/java/com/group10/app/main/GamePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group10.app.main;\n\nimport com.group10.app.entity.Inmate;\nimport com.group10.app.entity.Gaurd;\n\nimport com.group10.app.objects.SuperObject;\nimport com.group10.app.objects.TileManager;\nimport com.group10.app.MenuPanel.GameOverMenu;\nimport com.group10.app.MenuPanel.MenuScreen;\nimport com.group10.app.MenuPanel.PauseMenu;\nimport com.group10.app.MenuPanel.WonMenu;\n\nimport com.group10.app.SavedData.LoadGame;\nimport com.group10.app.SavedData.SaveGame;\n\nimport static java.lang.Math.*;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class GamePanel extends JPanel implements Runnable{\n   \n    // Screen size settings\n    final int originalCellSize = 12;\n    final int scaleFactor = 4;\n    public final int cellSize = originalCellSize * scaleFactor; //48x48 cells\n    public final int screenColNumber = 30;\n    public final int screenRowNumber = 18;\n    public final int screenWidth = cellSize * screenColNumber;//1920 pixels\n    public final int screenHeight = cellSize * screenRowNumber;//1080 pixels\n\n    final int framePerSecond = 60;\n\n    //The distance where the player and enemy will colide at\n    int ENEMY_COLLISION_DISTANCE = 40;\n\n    //The level the player is on\n    int GAME_LEVEL = 1;\n    Boolean GAME_SAVED = false;\n\n    //Load saved data\n    LoadGame load = new LoadGame();\n\n    //set up save game\n    SaveGame saveGame = new SaveGame();\n\n    //Set up the keyboard keys\n    KeyManager keyH = new KeyManager();\n\n    Thread gameThread;\n    \n    //setup the tiles\n    TileManager tileManage = new TileManager(this);\n    \n    //set player default position\n    public Inmate inmate = new Inmate(this, keyH);\n\n    //Set up the Mouse Keys\n    MouseManager mouseK = new MouseManager(this);\n\n    //set gaurds position\n    Gaurd gaurd = new Gaurd(this, 200, 200);\n\n    //Set up the main menu screen \n    MenuScreen mainMenu = new MenuScreen(this);\n\n    //set up the pause menu\n    PauseMenu pauseMenu = new PauseMenu(this, keyH);\n\n    //set up the win screen\n    WonMenu wonMenu = new WonMenu(this, keyH);\n\n    //set up game over screen\n    GameOverMenu gameOver = new GameOverMenu(this);\n    \n    // Create object array;\n    public SuperObject obj[] = new SuperObject[10];\n    \n    // Set up asset;\n    public AssetSetter asset = new AssetSetter(this);\n    \n    // Set up collision check;\n    public Collision collisionCheck = new Collision(this);\n\n    // Set up UI\n    public UI ui = new UI(this);\n\n    // Set up music and sound effect\n    Sound music = new Sound();\n    Sound soundEffect = new Sound();\n\n    public static enum STATE{MENU, GAME, EXIT, PAUSED, GAMEOVER, GAMEWON, RETRY}\n    public static STATE state = STATE.MENU;\n\n    public GamePanel(){\n        this.setPreferredSize(new Dimension(screenWidth, screenHeight));\n        this.setBackground(Color.black);\n        this.setDoubleBuffered(true);\n        this.addMouseListener(mouseK);\n        this.addKeyListener(keyH);\n        this.setFocusable(true);\n    }\n\n    public void setUpAsset() {\n        asset.setObject();\n        playMusic(0);\n    }\n\n    public void startGameThread(){\n            gameThread = new Thread(this);\n            gameThread.start();\n    }\n\n    \n    //Setting up collision between two objects.This function takes two perameters as turtles. \n    //Input: (Inmate:Obj, ObjectX: int, ObjectY: int: collision_type:int)   \n    public boolean isCollision(Inmate inmate, double objectX, double objectY, int collision_type){   \n        double distance = sqrt(pow(inmate.getX() - objectX, 2) + pow(inmate.getY() - objectY, 2));\n        //System.out.println(distance);\n            if (distance <= collision_type){\n                return true;\n            }\n            return false;\n    }\n\n    public boolean reachedGate(){\n        if(inmate.getX() >= 1344 && inmate.getX() <= 1350 && inmate.getY() >= 292 && inmate.getY() <= 544){\n            return true;\n        }\n        return false;\n    }\n\n    public void run() {\n        double drawInterval = 1000000000/ framePerSecond;\n        double nextDrawTime = System.nanoTime() + drawInterval;\n\n        while(gameThread != null){\n            \n            //render graphics\n            repaint();\n\n            //Pause the game if pause menu is active\n            update();\n            if(state != STATE.PAUSED && state != STATE.MENU && state != STATE.GAMEWON && state != STATE.GAMEOVER){\n                //Testing for collision detection with a gaurd\n                if (isCollision(inmate, gaurd.getX(), gaurd.getY(), ENEMY_COLLISION_DISTANCE)){\n                    System.out.println(\"ENEMY COLLIDED\");\n                    System.out.println(\"===================================\");\n                    state = STATE.GAMEOVER;\n                }\n\n                if(inmate.getNumKeys() == 3 && reachedGate()){\n                    state = STATE.GAMEWON;\n                }\n\n    \n                try {\n                    double remainingTime = nextDrawTime - System.nanoTime();\n                    remainingTime /= 1000000;\n    \n                    if(remainingTime < 0){\n                        remainingTime = 0;\n                    }\n    \n                    Thread.sleep((long) remainingTime);\n    \n                    nextDrawTime += drawInterval;\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public void update(){\n        inmate.update();\n    }\n\n    public void paintComponent(Graphics graphic){\n        super.paintComponent(graphic);\n        Graphics2D g2 = (Graphics2D) graphic;\n        \n        if (state == STATE.GAME){\n    \n            //draw tiles\n            tileManage.draw(g2);\n    \n            // Draw objects\n            for (int i = 0; i < obj.length; i++){\n                if (obj[i] != null){\n                    obj[i].draw(g2, this);\n                }\n            }\n    \n            //Draw gaurd\n            gaurd.draw(g2, this);\n    \n            //Draw the inmate\n            inmate.draw(g2);\n\n            // Draw UI\n            ui.draw(g2);\n\n            g2.dispose();\n            \n        }\n        else if(state == STATE.PAUSED){\n            pauseMenu.renderPauseMenu(g2);\n            g2.dispose();\n        }\n        else if (state == STATE.MENU){\n            //Render the main menu\n            mainMenu.renderMain(g2);\n            g2.dispose();\n        }\n        else if (state == STATE.GAMEWON){\n            //render the game won menu\n            wonMenu.renderWonGraphics(g2);\n            g2.dispose();\n        }\n        else if (state == STATE.GAMEOVER){\n            //render game over menu\n            gameOver.renderGameOverMenu(g2);\n            g2.dispose();\n        }\n    }\n\n    public void playMusic (int i) {\n        music.setFile(i);\n        music.play();\n        music.loop();\n    }\n\n    public void stopMusic () {\n        music.stop();\n    }\n\n    public void playSE(int i) {\n        soundEffect.setFile(i);\n        soundEffect.play();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/group10/app/main/GamePanel.java b/src/main/java/com/group10/app/main/GamePanel.java
--- a/src/main/java/com/group10/app/main/GamePanel.java	
+++ b/src/main/java/com/group10/app/main/GamePanel.java	
@@ -1,5 +1,6 @@
 package com.group10.app.main;
 
+import com.group10.app.entity.Entity;
 import com.group10.app.entity.Inmate;
 import com.group10.app.entity.Gaurd;
 
@@ -45,7 +46,7 @@
     SaveGame saveGame = new SaveGame();
 
     //Set up the keyboard keys
-    KeyManager keyH = new KeyManager();
+    KeyManager keyH = new KeyManager(this);
 
     Thread gameThread;
     
@@ -74,7 +75,7 @@
     GameOverMenu gameOver = new GameOverMenu(this);
     
     // Create object array;
-    public SuperObject obj[] = new SuperObject[10];
+    public Entity obj[] = new Entity[20];
     
     // Set up asset;
     public AssetSetter asset = new AssetSetter(this);
@@ -188,7 +189,7 @@
             // Draw objects
             for (int i = 0; i < obj.length; i++){
                 if (obj[i] != null){
-                    obj[i].draw(g2, this);
+                    obj[i].draw(g2);
                 }
             }
     
